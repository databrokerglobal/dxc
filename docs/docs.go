// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-06-02 17:38:03.020716182 +0200 CEST m=+0.355209051

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Databroker Github Repo",
            "url": "https://github.com/databrokerglobal/dxc"
        },
        "license": {
            "name": "License details",
            "url": "https://github.com/databrokerglobal/dxc/blob/master/dbdao-license.txt"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/add-example-datasources": {
            "post": {
                "description": "Create example datasources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dev"
                ],
                "summary": "Create example datasources",
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error creating datasources",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/datasource": {
            "post": {
                "description": "Create datasource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "datasources"
                ],
                "summary": "Create datasource",
                "parameters": [
                    {
                        "description": "Datasource",
                        "name": "datasource",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/datasources.DatasourceReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error creating datasource",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/datasource/{did}": {
            "get": {
                "description": "Get one datasource given a did",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "datasources"
                ],
                "summary": "Get one datasource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Digital identifier of the datasource",
                        "name": "did",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.Datasource"
                        }
                    },
                    "500": {
                        "description": "Error retrieving datasource from database",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete one datasource given a did",
                "tags": [
                    "datasources"
                ],
                "summary": "Delete one datasource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Digital identifier of the datasource",
                        "name": "did",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "datasource successfully deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error retrieving datasource from database",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/datasources": {
            "get": {
                "description": "Get all datasources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "datasources"
                ],
                "summary": "Get all datasources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.Datasource"
                            }
                        }
                    },
                    "500": {
                        "description": "Error retrieving datasources from database",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/getfile": {
            "get": {
                "description": "Get the file (for users)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "data"
                ],
                "summary": "Get the file (for users)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Signed verification data",
                        "name": "DXC_KEY",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "401": {
                        "description": "Request not authorized. Signature and verification data invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Datasource not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/authinfo": {
            "get": {
                "description": "Get address and api key for authentication with DXS",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get auth info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.UserAuth"
                        }
                    },
                    "404": {
                        "description": "Not data found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error getting auth info",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Save address and api key for authentication with DXS",
                "tags": [
                    "user"
                ],
                "summary": "Save auth info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address",
                        "name": "address",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "API Key",
                        "name": "apiKey",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error saving auth info",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "database.Datasource": {
            "type": "object",
            "properties": {
                "available": {
                    "type": "boolean"
                },
                "did": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "database.UserAuth": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "api_key": {
                    "type": "string"
                }
            }
        },
        "datasources.DatasourceReq": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "DXC",
	Description: "Data eXchange Controller API",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
