{"version":3,"file":"upgradeability.js","sourceRoot":"","sources":["../../test/upgradeability.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DTXTokenContract,\n  DTXTokenInstance,\n  DXCDealsContract,\n  DXCDealsInstance,\n  DXCTokensContract,\n  DXCTokensInstance,\n  DXCV2Contract,\n  DXCV2Instance,\n  MiniMeTokenFactoryContract,\n  MiniMeTokenFactoryInstance,\n  OwnedUpgradeabilityProxyContract,\n  OwnedUpgradeabilityProxyInstance,\n} from '../types/truffle-contracts';\n\nconst TF: MiniMeTokenFactoryContract = artifacts.require('MiniMeTokenFactory');\nconst DTX: DTXTokenContract = artifacts.require('DTXToken');\nconst DXCDeals: DXCDealsContract = artifacts.require('DXCDeals');\nconst DXCTokens: DXCTokensContract = artifacts.require('DXCTokens');\nconst DXCV2: DXCV2Contract = artifacts.require('DXCV2');\nconst OUP: OwnedUpgradeabilityProxyContract = artifacts.require(\n  'OwnedUpgradeabilityProxy'\n);\n\ncontract('Upgradeability of DXC', async accounts => {\n  it('Test proxied initializer', async () => {\n    const tfInstance: MiniMeTokenFactoryInstance = await TF.new();\n    const dtxInstance: DTXTokenInstance = await DTX.new(tfInstance.address);\n    const dxcDealsInstance: DXCDealsInstance = await DXCDeals.new();\n    const dxcTokensInstance: DXCTokensInstance = await DXCTokens.new();\n    const oUPDealsinstance: OwnedUpgradeabilityProxyInstance = await OUP.new();\n    const oUPTokensinstance: OwnedUpgradeabilityProxyInstance = await OUP.new();\n\n    let proxiedTokensDxc: DXCTokensInstance;\n    let proxiedDealsDxc: DXCDealsInstance;\n\n    assert.isOk(\n      await oUPTokensinstance.upgradeTo(dxcTokensInstance.address, {\n        from: accounts[0],\n      })\n    );\n\n    assert.isOk(\n      await oUPDealsinstance.upgradeTo(dxcDealsInstance.address, {\n        from: accounts[0],\n      })\n    );\n\n    proxiedTokensDxc = await DXCTokens.at(oUPTokensinstance.address);\n    proxiedDealsDxc = await DXCDeals.at(oUPDealsinstance.address);\n\n    await proxiedTokensDxc.initialize(\n      dtxInstance.address,\n      proxiedDealsDxc.address\n    );\n\n    await proxiedDealsDxc.initialize(proxiedTokensDxc.address);\n\n    // check if the intial state is correct\n    const val2 = await proxiedTokensDxc.protocolPercentage();\n    assert.equal(val2.toNumber(), 5);\n\n    // check if changing the initial state works\n    await proxiedTokensDxc.changeProtocolPercentage(10);\n    const val3 = await proxiedTokensDxc.protocolPercentage();\n    assert.equal(val3.toNumber(), 10);\n  });\n\n  it('Test upgradeabilty feature', async () => {\n    const tfInstance: MiniMeTokenFactoryInstance = await TF.new();\n    const dtxInstance: DTXTokenInstance = await DTX.new(tfInstance.address);\n    const dxcTokensInstance: DXCTokensInstance = await DXCTokens.new();\n    const dxcDealsInstance: DXCDealsInstance = await DXCDeals.new();\n    const oUPTokensinstance: OwnedUpgradeabilityProxyInstance = await OUP.new();\n    const oUPDealsinstance: OwnedUpgradeabilityProxyInstance = await OUP.new();\n\n    let proxiedTokensDxc: DXCTokensInstance;\n    let proxiedDealsDxc: DXCDealsInstance;\n\n    assert.isOk(\n      await oUPTokensinstance.upgradeTo(dxcTokensInstance.address, {\n        from: accounts[0],\n      })\n    );\n\n    assert.isOk(\n      await oUPDealsinstance.upgradeTo(dxcDealsInstance.address, {\n        from: accounts[0],\n      })\n    );\n\n    proxiedTokensDxc = await DXCTokens.at(oUPTokensinstance.address);\n    proxiedDealsDxc = await DXCDeals.at(oUPDealsinstance.address);\n\n    await proxiedTokensDxc.initialize(\n      dtxInstance.address,\n      proxiedDealsDxc.address\n    );\n\n    await proxiedDealsDxc.initialize(proxiedTokensDxc.address);\n\n    const val2 = await proxiedTokensDxc.protocolPercentage();\n    assert.equal(val2.toNumber(), 5);\n\n    await proxiedTokensDxc.changeProtocolPercentage(10);\n    const val3 = await proxiedTokensDxc.protocolPercentage();\n    assert.equal(val3.toNumber(), 10);\n\n    // deploy new version of DXC with the newFeature method\n    const newDxcInstance: DXCV2Instance = await DXCV2.new();\n    assert.isOk(await oUPTokensinstance.upgradeTo(newDxcInstance.address));\n\n    // Check if state of previous dxcInstance is still maintained\n    const proxiedUpgradedDxc = await DXCV2.at(oUPTokensinstance.address);\n    const val4 = await proxiedUpgradedDxc.protocolPercentage();\n    assert.equal(val4.toNumber(), 10);\n\n    // Check if newFeature method works\n    const message = await proxiedUpgradedDxc.newFeature();\n    assert.equal(message, 'Whoooaaaaa it works');\n  });\n});\n"]}