{"version":3,"file":"staking.js","sourceRoot":"","sources":["../../test/staking.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    DTXContract,\n    DTXInstance, StakingContract,\n    StakingInstance\n} from '../types/truffle-contracts';\n\nconst {expectRevert} = require(\"@openzeppelin/test-helpers\");\n\nconst Staking: StakingContract = artifacts.require('Staking');\nconst DTX: DTXContract = artifacts.require('DTX');\n\ncontract('Staking', async accounts => {\n    describe('Staking', async () => {\n        let dtxInstance: DTXInstance;\n        let stk: StakingInstance;\n        \n\n    before(async () => {\n        dtxInstance = await DTX.new(accounts[0], web3.utils.toWei('10000000'));\n        stk = await Staking.new(accounts[0], web3.utils.toWei('10000000'), dtxInstance.address);\n\n        await dtxInstance.increaseAllowance(\n            accounts[0],\n            web3.utils.toWei('10000000')\n          );\n        \n        await dtxInstance.increaseAllowance(\n            stk.address,\n            web3.utils.toWei('10000000')\n          );\n\n\n        await dtxInstance.transferFrom(accounts[0],\n            stk.address, web3.utils.toWei('1000'));\n    });\n\n    it('Staking contract address has balance', async () => {\n        expect(\n          await (await dtxInstance.balanceOf(stk.address)).toString()\n        ).to.be.equal(web3.utils.toWei('1000'));\n    });\n\n    it('Monthly reward should equal to 1000', async () => {\n        expect(\n          await (await stk.monthlyReward()).toString()\n        ).to.be.equal(web3.utils.toWei('1000'));\n    });\n\n    it('Can create a stake', async () => {\n        expect(\n            await stk.createStake(web3.utils.toWei('1000'), web3.utils.toWei('20'), {from: accounts[0]}));\n\n    });\n\n    it('Can remove a stake', async () => {\n        expect(\n            await stk.removeStake(web3.utils.toWei('1000'), {from: accounts[0]}));\n    });\n\n    it('Total stake should be 1000', async () => {\n        await dtxInstance.transferFrom(accounts[0],\n          stk.address, web3.utils.toWei('1000'));\n\n        await stk.createStake(web3.utils.toWei('1000'), web3.utils.toWei('20'));\n        expect( \n            await (await stk.totalStakes()).toString()\n            ).to.be.equal(web3.utils.toWei('1000'));\n    });\n\n    it('Random account should not be stakeholder', async () => {\n      const isStakeholder = ((await stk.isStakeholder(accounts[1])));\n      expect(\n          isStakeholder[0]\n          ).to.be.equal(false);\n    });\n\n    it('Calculate dummy PandL', async () => {\n        // Total stake: 2000\n        // Monthly reward: 1000\n        // Stake of account[0]: 2000\n        // Ratio time staking remained on the program: \n        // - Staking time: 10\n        // PandL = 1000 * (2000/2000) * (30-20/30) \n        // Attention: I have a decimal issue that's why the BN\n\n        await stk.createStake(web3.utils.toWei('1000'), web3.utils.toWei('20'), {from: accounts[0]});\n        await dtxInstance.transferFrom(accounts[0],\n          stk.address, web3.utils.toWei('2000'));\n        await stk.calculateReward(accounts[0], web3.utils.toWei('30'));\n\n        expect(\n            await web3.utils.toWei(await (await stk.calculateReward(accounts[0], web3.utils.toWei('30'))).toString())\n            ).to.be.equal(web3.utils.toWei('330000000000000000000'));\n    });\n      \n\n    it('Distributes rewards', async () => {\n\n        await stk.distributeRewards(web3.utils.toWei('30'));  \n        const rewardOf = await stk.rewardOf(accounts[0].toString());        \n        expect(\n            web3.utils.toWei(rewardOf).toString()\n            ).to.be.equal(web3.utils.toWei('330000000000000000000').toString());\n    }); \n\n    it('Total rewards should be correct', async () => {\n\n        await stk.distributeRewards(web3.utils.toWei('30'));  \n        const totalRewards = await stk.totalRewards();     \n        expect(\n            web3.utils.toWei(totalRewards).toString()\n            ).to.be.equal(web3.utils.toWei('660000000000000000000').toString());\n    }); \n\n    it('Withraw all rewards check', async () => {\n\n        await stk.distributeRewards(web3.utils.toWei('30'));  \n        await stk.withdrawAllReward();  \n        const rewardOf = await stk.rewardOf(accounts[0].toString());      \n        expect(\n            web3.utils.toWei(rewardOf).toString()\n            ).to.be.equal('0');\n    });\n\n    it('Full user workflow frow owner account', async () => {\n        // To enable accounts[1] to trnasfer DTX\n        await dtxInstance.increaseAllowance(\n          accounts[1],\n          web3.utils.toWei('1000')\n        );\n        \n        // To enable transferFrom from the staking contract\n        await dtxInstance.increaseAllowance(\n            stk.address,\n            web3.utils.toWei('1000')\n          );\n\n        // To create a monthly reward\n        await dtxInstance.transferFrom(accounts[0],\n            stk.address, web3.utils.toWei('1000'));\n        // So that accounts[1] has funds\n        await dtxInstance.transferFrom(accounts[0],\n          accounts[1], web3.utils.toWei('1000'));\n\n        await stk.createStake(web3.utils.toWei('1000'), web3.utils.toWei('20'));\n        await stk.distributeRewards(web3.utils.toWei('30'));  \n        await stk.withdrawReward();\n        const rewardOf = await stk.rewardOf(accounts[1].toString()); \n\n        expect(\n            web3.utils.toWei(rewardOf).toString()\n            ).to.be.equal('0');\n    });\n\n    it(\"should revert distributeRewards if the msg.sender is not the owner\", async () => {\n      await expectRevert(\n        stk.distributeRewards(20, {from: accounts[1]}),\n        \"Ownable: caller is not the owner\"\n      );\n    });\n\n    it(\"should revert withdrawAllreward if the msg.sender is not the owner\", async () => {\n      await expectRevert(\n        stk.withdrawAllReward({from: accounts[1]}),\n        \"Ownable: caller is not the owner\"\n      );\n    });\n\n    it(\"should revert createStaKe if the msg.sender does not have enough allowance\", async () => {\n      await expectRevert(\n        stk.createStake(web3.utils.toWei('1000'),web3.utils.toWei('20'), {from: accounts[2]}),\n        \"VM Exception while processing transaction: revert Not enough DTX to stake\"\n      );\n    });\n\n    it(\"should revert removeStake if the msg.sender does not have stake before or not enough staked\", async () => {\n      await expectRevert(\n        stk.removeStake(web3.utils.toWei('1000'), {from: accounts[1]}),\n        \"VM Exception while processing transaction: revert Not enough staked!\"\n      );\n    });\n\n    it('Full user workflow from different account than owner account', async () => {\n      await dtxInstance.transferFrom(accounts[0],\n        stk.address, web3.utils.toWei('1000'));\n\n      await dtxInstance.transferFrom(accounts[0],\n          accounts[1], web3.utils.toWei('1000'));\n      \n      await dtxInstance.approve(\n            accounts[1],\n            web3.utils.toWei('2000'), \n            {from: accounts[0]}\n          );\n\n      await dtxInstance.increaseAllowance(\n            accounts[1],\n            web3.utils.toWei('2000'), \n            {from: accounts[0]}\n          );\n      await dtxInstance.increaseAllowance(\n            stk.address,\n            web3.utils.toWei('2000'), \n            {from: accounts[0]}\n          );\n      await stk.createStake(web3.utils.toWei('100'), web3.utils.toWei('20'), {from: accounts[1]});\n      await stk.distributeRewards(web3.utils.toWei('30'));  \n      await stk.withdrawAllReward({from: accounts[0]});\n      const rewardOf = await stk.rewardOf(accounts[1].toString()); \n\n      expect(\n          web3.utils.toWei(rewardOf).toString()\n          ).to.be.equal('0');\n    });\n  });\n});\n"]}