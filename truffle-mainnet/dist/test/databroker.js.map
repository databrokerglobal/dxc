{"version":3,"file":"databroker.js","sourceRoot":"","sources":["../../test/databroker.ts"],"names":[],"mappings":"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","sourcesContent":["import {use} from 'chai';\nimport {utils} from 'ethers';\nimport {\n  deployContract,\n  deployMockContract,\n  MockProvider,\n  solidity,\n} from 'ethereum-waffle';\n\nimport IUniswap from '../build/IUniswap.json';\nimport Databroker from '../build/Databroker.json';\nimport USDT from '../build/USDT.json';\nimport DTX from '../build/DTX.json';\n\nconst {expectRevert} = require('@openzeppelin/test-helpers');\n\nuse(solidity);\n\ndescribe('Databroker', () => {\n  let databroker: any;\n  let usdt: any;\n  let dtx: any;\n  let mockUniswap: any;\n  let wallet: any;\n  let testWallet: any;\n  const dtxStakingAddress = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D';\n  const wyreWalletAddress = '0xa2Bd44b574035B347C48e426C50Bae6e6e392b3e';\n\n  beforeEach(async () => {\n    [wallet, testWallet] = new MockProvider().getWallets();\n    mockUniswap = await deployMockContract(wallet, IUniswap.abi);\n\n    usdt = await deployContract(wallet, USDT, [\n      utils.parseUnits('999999'),\n    ]);\n\n    dtx = await deployContract(wallet, DTX, [\n      wallet.address,\n      utils.parseUnits('999999'),\n    ]);\n\n    databroker = await deployContract(wallet, Databroker, [\n      mockUniswap.address,\n      usdt.address,\n      dtx.address,\n      wyreWalletAddress,\n      dtxStakingAddress,\n    ]);\n  });\n\n  it('should swap tokens for tokens', async () => {\n    await mockUniswap.mock.swapExactTokensForTokens.returns([\n      utils.parseUnits('999999'),\n      utils.parseUnits('999999'),\n    ]);\n\n    await databroker.swapTokens(\n      utils.parseUnits('1000'),\n      utils.parseUnits('1000'),\n      [usdt.address, dtx.address],\n      databroker.address,\n      utils.parseUnits('1622134835')\n    );\n\n    const allowance = await usdt.allowance(\n      databroker.address,\n      mockUniswap.address\n    );\n\n    expect(allowance.toString()).to.be.equal(\n      utils.parseUnits('1000').toString()\n    );\n\n    expect('approve').to.be.calledOnContractWith(usdt, [\n      mockUniswap.address,\n      utils.parseUnits('1000'),\n    ]);\n\n    expect('swapExactTokensForTokens').to.be.calledOnContractWith(mockUniswap, [\n      utils.parseUnits('1000'),\n      utils.parseUnits('1000'),\n      [usdt.address, dtx.address],\n      databroker.address,\n      utils.parseUnits('1622134835'),\n    ]);\n  });\n\n  it('should successfully complete payout', async () => {\n    await mockUniswap.mock.swapExactTokensForTokens.returns([\n      utils.parseUnits('999999'),\n      utils.parseUnits('999999'),\n    ]);\n\n    await dtx.transfer(databroker.address, utils.parseUnits('10'), {\n      from: wallet.address,\n    });\n\n    const beforeContractBalance = await dtx.balanceOf(databroker.address);\n\n    expect(beforeContractBalance).to.be.equal(utils.parseUnits('10'));\n\n    await databroker.payout(\n      utils.parseUnits('1000'),\n      utils.parseUnits('1000'),\n      utils.parseUnits('10'),\n      [dtx.address, usdt.address],\n      utils.parseUnits('1622134835')\n    );\n\n    const allowance = await dtx.allowance(\n      databroker.address,\n      mockUniswap.address\n    );\n\n    expect(allowance.toString()).to.be.equal(\n      utils.parseUnits('1000').toString()\n    );\n\n    expect('approve').to.be.calledOnContractWith(dtx, [\n      mockUniswap.address,\n      utils.parseUnits('1000'),\n    ]);\n\n    expect('swapExactTokensForTokens').to.be.calledOnContractWith(mockUniswap, [\n      utils.parseUnits('1000'),\n      utils.parseUnits('1000'),\n      [dtx.address, usdt.address],\n      wyreWalletAddress,\n      utils.parseUnits('1622134835'),\n    ]);\n\n    const afterContractBalance = await dtx.balanceOf(databroker.address);\n    const stakingContractBalance = await dtx.balanceOf(dtxStakingAddress);\n\n    expect(afterContractBalance).to.be.equal(utils.parseUnits('0'));\n    expect(stakingContractBalance).to.be.equal(utils.parseUnits('10'));\n  });\n\n  it('payout should revert if contract has insufficient DTX balance', async () => {\n    await expectRevert(\n      databroker.payout(\n        utils.parseUnits('1000'),\n        utils.parseUnits('1000'),\n        utils.parseUnits('10'),\n        [dtx.address, usdt.address],\n        utils.parseUnits('1622134835')\n      ),\n      'Databroker: Insufficient DTX balance of contract'\n    );\n  });\n\n  it('should update wyreWalletAddress and staking address', async () => {\n    const newStakingAddress = '0xA515EE597Bfa4DCc90502aF6744A215bB0AD9EbC';\n    const newWyreWalletAddress = '0x9e4e33eF13F67be8Fcfd94c61F0164123de2dF6F';\n\n    await databroker.updateWyreWalletAddress(newWyreWalletAddress);\n    await databroker.updateWyreWalletAddress(newStakingAddress);\n  });\n\n  it('should be able to withdraw the DTX and USDT linked to the databroker contract', async () => {\n    await dtx.transfer(databroker.address, utils.parseUnits('10'), {\n      from: wallet.address,\n    });\n    await usdt.transfer(databroker.address, utils.parseUnits('10'), {\n      from: wallet.address,\n    });\n\n    await databroker.withdrawDTX(testWallet.address, utils.parseUnits('10'));\n    await databroker.withdrawUSDT(testWallet.address, utils.parseUnits('10'));\n\n    const testWalletDTX = await dtx.balanceOf(testWallet.address);\n    const testWalletUSDT = await usdt.balanceOf(testWallet.address);\n\n    expect(testWalletDTX).to.be.equal(utils.parseUnits('10'));\n    expect(testWalletUSDT).to.be.equal(utils.parseUnits('10'));\n  });\n});\n"]}