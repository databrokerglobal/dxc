{"version":3,"file":"3_deploy_dxc.js","sourceRoot":"","sources":["../../migrations/3_deploy_dxc.ts"],"names":[],"mappings":";;;;;AAAA,4CAAoB;AAYpB,MAAM,SAAS,GAAqB,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AAClE,MAAM,SAAS,GAAsB,SAAS,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;AACpE,MAAM,QAAQ,GAAqB,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AACjE,MAAM,UAAU,GAAqC,SAAS,CAAC,OAAO,CACpE,0BAA0B,CAC3B,CAAC;AACF,MAAM,WAAW,GAAqC,SAAS,CAAC,OAAO,CACrE,0BAA0B,CAC3B,CAAC;AAEF,MAAM,gBAAgB,GAAG,KAAK,EAC5B,QAA0B,EAC1B,OAAe,EACf,QAAkB,EAClB,EAAE;IACF,MAAM,gBAAgB,GAAqB,MAAM,SAAS,CAAC,QAAQ,EAAE,CAAC;IAEtE,uGAAuG;IACvG,MAAM,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACjC,MAAM,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAEhC,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,GAAG,EAAE,CAAC;IAC3C,MAAM,YAAY,GAAG,MAAM,WAAW,CAAC,GAAG,EAAE,CAAC;IAE7C,MAAM,UAAU,GAAsB,MAAM,SAAS,CAAC,QAAQ,EAAE,CAAC;IACjE,MAAM,SAAS,GAAqB,MAAM,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAE9D,MAAM,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACjD,MAAM,WAAW,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAE/C,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IAC5D,MAAM,UAAU,GAAG,MAAM,QAAQ,CAAC,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAE1D,YAAE,CAAC,aAAa,CACd,iCAAiC,OAAO,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,OAAO,EACxE,IAAI,CAAC,SAAS,CAAC;QACb,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;QAC3B,OAAO,EAAE,OAAO;QAChB,QAAQ,EAAE,gBAAgB,CAAC,OAAO;QAClC,QAAQ,EAAE,SAAS,CAAC,OAAO;QAC3B,SAAS,EAAE,UAAU,CAAC,OAAO;QAC7B,aAAa,EAAE,UAAU,CAAC,OAAO;QACjC,aAAa,EAAE,UAAU,CAAC,OAAO;KAClC,CAAC,CACH,CAAC;IAEF,MAAM,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAChD,MAAM,UAAU,CAAC,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC;AAC5E,CAAC,CAAC;AAEF,MAAM,CAAC,OAAO,GAAG,CAAC,QAAa,EAAE,OAAe,EAAE,QAAkB,EAAE,EAAE;IACtE,QAAQ;SACL,IAAI,CAAC,GAAG,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;SACzD,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;QACpB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC;AACP,CAAC,CAAC","sourcesContent":["import fs from 'fs';\n\nimport {\n  DTXTokenContract,\n  DTXTokenInstance,\n  DXCDealsContract,\n  DXCDealsInstance,\n  DXCTokensContract,\n  DXCTokensInstance,\n  OwnedUpgradeabilityProxyContract,\n} from '../types/truffle-contracts';\n\nconst DTXMiniMe: DTXTokenContract = artifacts.require('DTXToken');\nconst DXCTokens: DXCTokensContract = artifacts.require('DXCTokens');\nconst DXCDeals: DXCDealsContract = artifacts.require('DXCDeals');\nconst ProxyDeals: OwnedUpgradeabilityProxyContract = artifacts.require(\n  'OwnedUpgradeabilityProxy'\n);\nconst ProxyTokens: OwnedUpgradeabilityProxyContract = artifacts.require(\n  'OwnedUpgradeabilityProxy'\n);\n\nconst performMigration = async (\n  deployer: Truffle.Deployer,\n  network: string,\n  accounts: string[]\n) => {\n  const dTXTokenInstance: DTXTokenInstance = await DTXMiniMe.deployed();\n\n  // We are going to deploy the DXC using a proxy pattern, allowing us to upgrade the DXC  contract later\n  await deployer.deploy(DXCTokens);\n  await deployer.deploy(DXCDeals);\n\n  const dProxyDeals = await ProxyDeals.new();\n  const dProxyTokens = await ProxyTokens.new();\n\n  const dDxcTokens: DXCTokensInstance = await DXCTokens.deployed();\n  const dDxcDeals: DXCDealsInstance = await DXCDeals.deployed();\n\n  await dProxyTokens.upgradeTo(dDxcTokens.address);\n  await dProxyDeals.upgradeTo(dDxcDeals.address);\n\n  const tokenProxy = await DXCTokens.at(dProxyTokens.address);\n  const dealsProxy = await DXCDeals.at(dProxyDeals.address);\n\n  fs.writeFileSync(\n    `./migration-reports/migration-${network}-${Date.now().toString()}.json`,\n    JSON.stringify({\n      Time: Date.now().toString(),\n      Network: network,\n      DtxToken: dTXTokenInstance.address,\n      dxcdeals: dDxcDeals.address,\n      dxctokens: dDxcTokens.address,\n      dxctokenProxy: tokenProxy.address,\n      dxcdealsProxy: dealsProxy.address,\n    })\n  );\n\n  await dealsProxy.initialize(tokenProxy.address);\n  await tokenProxy.initialize(dTXTokenInstance.address, dealsProxy.address);\n};\n\nmodule.exports = (deployer: any, network: string, accounts: string[]) => {\n  deployer\n    .then(() => performMigration(deployer, network, accounts))\n    .catch((err: Error) => {\n      console.log(err);\n      process.exit(1);\n    });\n};\n"]}