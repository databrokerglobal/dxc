{"version":3,"file":"encodeCall.js","sourceRoot":"","sources":["../../../test/utils/encodeCall.ts"],"names":[],"mappings":";;;;;AAAA,oEAAiC;AACjC,wCAAuC;AAEvC,gCAAgC;AACnB,QAAA,2BAA2B,GAAG,sCAAsC,CAAC;AAElF,SAAgB,UAAU,CACxB,IAAY,EACZ,IAAc,EACd,SAAgB;IAEhB,MAAM,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAC1C,MAAM,QAAQ,GAAG,wBAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC1D,MAAM,MAAM,GAAG,wBAAG,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAE3D,OAAO,KAAK,QAAQ,GAAG,MAAM,EAAE,CAAC;AAClC,CAAC;AAVD,gCAUC;AAED,SAAS,WAAW,CAAC,KAAsB;IACzC,IAAI,iBAAS,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;QAChC,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;KACzB;IACD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;KACzB;IACD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,mCAA2B,CAAC,EAAE;QACzE,OAAO,IAAI,iBAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;KAChD;IAED,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import abi from 'ethereumjs-abi';\nimport {BigNumber} from 'ethers/utils';\n\n// BigNumber as a string pattern\nexport const SCIENTIFIC_NOTATION_PATTERN = /^\\s*[-]?\\d+(\\.\\d+)?[e,E](\\+)?\\d+\\s*$/;\n\nexport function encodeCall(\n  name: string,\n  args: string[],\n  rawValues: any[]\n): string {\n  const values = rawValues.map(formatValue);\n  const methodId = abi.methodID(name, args).toString('hex');\n  const params = abi.rawEncode(args, values).toString('hex');\n\n  return `0x${methodId}${params}`;\n}\n\nfunction formatValue(value: number | string): string {\n  if (BigNumber.isBigNumber(value)) {\n    return value.toString();\n  }\n  if (typeof value === 'number') {\n    return value.toString();\n  }\n  if (typeof value === 'string' && value.match(SCIENTIFIC_NOTATION_PATTERN)) {\n    return new BigNumber(Number(value)).toString();\n  }\n\n  return value;\n}\n"]}