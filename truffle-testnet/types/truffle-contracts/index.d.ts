/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import BN from "bn.js";

export interface DXCDealsContract extends Truffle.Contract<DXCDealsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DXCDealsInstance>;
}

export interface MigrationsContract
  extends Truffle.Contract<MigrationsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface OwnableContract extends Truffle.Contract<OwnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OwnableInstance>;
}

export interface DXCDealsInstance extends Truffle.ContractInstance {
  initializeOwner: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      lockPeriod: number | BN | string,
      platformPercentage: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      lockPeriod: number | BN | string,
      platformPercentage: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      lockPeriod: number | BN | string,
      platformPercentage: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      lockPeriod: number | BN | string,
      platformPercentage: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createDeal: {
    (
      did: string,
      buyerId: string,
      sellerId: string,
      platformAddress: string | BN,
      amountInUSDT: number | BN | string,
      amountInDTX: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      did: string,
      buyerId: string,
      sellerId: string,
      platformAddress: string | BN,
      amountInUSDT: number | BN | string,
      amountInDTX: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      did: string,
      buyerId: string,
      sellerId: string,
      platformAddress: string | BN,
      amountInUSDT: number | BN | string,
      amountInDTX: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      did: string,
      buyerId: string,
      sellerId: string,
      platformAddress: string | BN,
      amountInUSDT: number | BN | string,
      amountInDTX: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  declinePayout: {
    (
      dealIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      dealIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      dealIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      dealIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  completePayout: {
    (
      dealIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      dealIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      dealIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      dealIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculateTransferAmount(
    dealIndex: number | BN | string,
    swappedDTXEst: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  editPlatformPercentage: {
    (
      platformPercentage: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      platformPercentage: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      platformPercentage: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      platformPercentage: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  editLockPeriod: {
    (
      lockPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      lockPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      lockPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      lockPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getDealByIndex(
    dealIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    did: string;
    dealIndex: BN;
    buyerId: string;
    sellerId: string;
    platformAddress: string;
    amountInDTX: BN;
    amountInUSDT: BN;
    validFrom: BN;
    validUntil: BN;
    accepted: boolean;
    payoutCompleted: boolean;
  }>;

  getDealsForDID(
    did: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      did: string;
      dealIndex: BN;
      buyerId: string;
      sellerId: string;
      platformAddress: string;
      amountInDTX: BN;
      amountInUSDT: BN;
      validFrom: BN;
      validUntil: BN;
      accepted: boolean;
      payoutCompleted: boolean;
    }[]
  >;

  getAllDeals(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      did: string;
      dealIndex: BN;
      buyerId: string;
      sellerId: string;
      platformAddress: string;
      amountInDTX: BN;
      amountInUSDT: BN;
      validFrom: BN;
      validUntil: BN;
      accepted: boolean;
      payoutCompleted: boolean;
    }[]
  >;

  getPlatformPercentage(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getLockPeriod(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getCurrentDealIndex(txDetails?: Truffle.TransactionDetails): Promise<BN>;
}

export interface MigrationsInstance extends Truffle.ContractInstance {
  last_completed_migration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setCompleted: {
    (
      completed: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      completed: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      completed: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      completed: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface OwnableInstance extends Truffle.ContractInstance {
  initializeOwner: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}
